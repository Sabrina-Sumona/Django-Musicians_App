html form vs django form:

html:
<label for="user_name">Please Enter Your Name</label>
<input type="text" name="user_name" value="" required>

django:
user_name = forms.CharField()

-----------------------------------------------------------------------------
Fields:
https://docs.djangoproject.com/en/3.0/ref/forms/fields/#built-in-field-classes
-----------------------------------------------------------------------------
Widgets:
https://docs.djangoproject.com/en/3.0/ref/forms/widgets/
-----------------------------------------------------------------------------
Form validation
https://docs.djangoproject.com/en/3.0/ref/validators/
-----------------------------------------------------------------------------
<!-- <html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title>Form</title>
    <link rel="stylesheet" href={% static "my_app/css/style.css" %}>
  </head>
  <body>
    <h3>This form is created by HTML code</h3>
    if action="" the page loaded in the same page after submission of the form otherwise to the given file
    <form action="" method="post">
      <label for="user_name">Please Enter Your Name</label>
      <br>
      <input type="text" name="user_name" value="" required>
      <br>
      <label for="user_email">Please Enter Your Email</label>
      <br>
      <input type="email" name="user_email" value="" required>
      <br>
      <input type="submit" name="submit" value="Submit">
    </form>
    <hr>
    <h3>{{ heading_1 }}</h3>
     <form action="" method="POST">
     {{ test_form }}
      <h3>{{ heading_2 }}</h3>
      here all input fields will be shown as paragraph
      <a href="/my_app">Home</a>
      <a href="{% url 'my_app:index' %}">Back</a>
      <h3>{{ heading_3 }}</h3>
      {{ test_form.as_p }}
      as_ul shows as under ordered list & as_table shows as table
      django does not allow submission without csrf_token
      {% csrf_token %}
      <input type="submit" name="submit" value="Submit">
    </form>
    <hr>
    {% if form_submited %}
      <p>Name: {{ user_name }}</p>
      <p>Date of Birth: {{ user_dob }}</p>
      <p>Age: {{ user_age }} </p>
      <p>Number: {{ num_field }} </p>
      <p>Email: {{ user_email }}</p>
      <p>Email validation: {{ user_vemail }}</p>
      <p>Agree: {{ agreement }} </p>
      <p>Given stars: {{ rating }} </p>
      <p>Gender: {{ gender }} </p>
      <p>Favourite color: {{ color }} </p>
    {% endif %}
  </body>
</html> -->
-----------------------------------------------------------------------------
from django import forms
# here forms is bulit in library & CharField(), EmailField() etc are library FUNCTIONS
from django.core import validators
from my_app.models import Musician, Album
# from my_app import models

class MusicianForm(forms.ModelForm):
    class Meta:
        # when we import Musician we can use this
        model = Musician

        # when we import models we can use this
        # model = models.Musician

        # #  exclude means except these other will be allowed
        # exclude = ['last_name']

        # not all fields, just these fields will be allowed
        # fields = ('first_name','last_name',)

        # for all field form will be created
        # creadted form will follows models rules
        fields = "__all__"

# def even(val):
#     if val % 2 != 0:
#         raise forms.ValidationError("It must be an even number!")

# class user_form(forms.Form):
# # all fields are required by default
# # but can make it false
# # initial is similar as value of input field
# # please_enter_your_name = forms.CharField(required=False, initial="Sabrina Sumona")
# # automatically creates label by removing _ and converting the 1st char into Uppercase
# # but we can modify it
# # django does not provide place holder as core argument
# # but we can create it by using widget
# # we can also add style using widget
# # user_email = forms.EmailField(label="Please enter your email", widget = forms.TextInput(attrs = {'placeholder':'Enter a valid email address which belongs to you', 'style':'width: 300px'}))
# # we can also add date type using widget to show the calender
# # user_dob = forms.DateField(label="Date of Birth", widget = forms.TextInput( attrs={'type':'date'}))
#
#     # we can set max & min length of a char field
#     # user_name = forms.CharField(max_length=20, min_length=5, label="Full Name", widget = forms.TextInput( attrs= {'placeholder':'Enter your full name','style':'width:300px'} ) )
#     # we can validate a input by using validators
#     user_name = forms.CharField(validators=[validators.MaxLengthValidator(20),validators.MinLengthValidator(5)], label="Full Name", widget = forms.TextInput( attrs= {'placeholder':'Enter your full name','style':'width:300px'} ) )
#
#     user_dob = forms.DateField(label="Date of Birth", widget = forms.TextInput( attrs={'type':'date'}))
#
#     # in case of char field 'length' term is used but in case of num 'value' term is used for max / min count
#     user_age = forms.IntegerField(validators=[validators.MaxValueValidator(100),validators.MinValueValidator(1)], label="Current Age")
#
#     # user defined validators
#     num_field = forms.IntegerField(validators=[even], label="Enter an even number")
#
#     user_email = forms.EmailField(label="Email", widget = forms.TextInput( attrs= {'placeholder':'Enter your email address',} ))
#
#     user_vemail = forms.EmailField(label="Confirm Email", widget = forms.TextInput( attrs= {'placeholder':'Enter your email again',} ))
#
#     def clean(self):
#         all_cleaned_data = super().clean()
#         user_emai = all_cleaned_data['user_email']
#         user_vemail = all_cleaned_data['user_vemail']
#
#         if user_emai != user_vemail:
#             raise forms.ValidationError("Emails Don't Match!!!!")
#
#     # boolean field returns true or false wuth checkbox
#     agreement = forms.BooleanField(required=False)
#
#     # choices in drop down
#     choices = (('','--Options--'), ('1', 'Worst'), ('2', 'Bad'), ('3', 'Not Bad'), ('4', 'Good'), ('5', 'Excellent!'))
#     rating = forms.ChoiceField(choices=choices, required=False)
#
#     # radio buttons choices
#     choices = (('F','Female'),('M','Male'))
#     gender = forms.ChoiceField(choices=choices, widget=forms.RadioSelect(attrs= {'class': "custom-radio-list"}))
#
#     # # multiple choices
#     # choices = (('r','Red'),('b','Blue'),('p','Pink'),('g','Green'),('w','White'))
#     # color = forms.MultipleChoiceField(choices=choices, required=False)
#
#     # multiple choices with checkbox
#     choices = (('r','Red'),('b','Blue'),('p','Pink'),('g','Green'),('w','White'))
#     color = forms.MultipleChoiceField(choices=choices, widget=forms.CheckboxSelectMultiple(attrs= {'class': "custom-radio-list"}))
